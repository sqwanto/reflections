>> What happens when you initialize a repository? Why do you need to do it?

> A new hidden file named '.git' is created which creates an empty repository on Git.  This file is important because it contains metadata that includes all previous commit information.

>> How is the staging area different from the working directory and the repository? What value do you think it offers?

> The staging area serves as a medium between the working directory and repository.  I believe it's value comes from users not being entirely sure about what they want to commit until they can see it from a high level.  If you're going to be committing multiple files in one go, then you might not be sure which ones you should commit and which ones you'll end up leaving out until you've done them all.  The staging area allows you to put files aside as your work through them before bundling them all up for one commit.

>> How can you use the staging area to make sure you have one commit per logical change?

> You can use the various forms of 'git diff' to view changes between your Working Directory, Staging Area, and Repository to ensure that you aren't changing too much or too little per commit.

>> What are some situations when branches would be helpful in keeping your history organized? How would branches help?

> Branches are helpful when you want to try out a new feature or explore a new concept with a project, but you don't want to keep it in your production code in case there's a big error.  By creating different branches in a repo, you can try out different things separately without messing up the current version of a project.

>> How do the diagrams help you visualize the branch structure?

> They make it easy to see which commits are visible and which aren't when using git log.

>> What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

> The result is the combination of the two branches into one branch.  All previous commits from both branches are then contained in that one branch.  We represent it as two arrows merging into one commit because in the future it will just be one branch as opposed to two.

>> What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

> Automatic merging gets rid of a lot of manual work poring over code.  